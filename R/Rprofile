options(repos = c(CRAN='https://cloud.r-project.org'))
# .Rprofile -- commands to execute at the beginning of each R session
#
# You can use this file to load packages, set options, etc.
#
# NOTE: changes in this file won't be reflected until after you quit
# and start a new session
#
if(interactive()){
  options(prompt = "\033[34m> \033[39m")
  options("Ncpus" = 8L)

  #library(zeallot)
  #c(`<-`, `%<-%`) %<-% c(`%<-%`, `<-`)
  #library(colorout)
  #library(setwidth)

  #tryCatch(library(gitty), warning = function(e) e, error = function(e) e)

  if (file.exists("~/.Rprofile.local")) {
    source("~/.Rprofile.local")
  }

  options(warnPartialMatchAttr = TRUE,
          warnPartialMatchDollar = TRUE,
          warn = 1,
          warning.length = 8170) # 8170 is the maximum warning length

  options(max.print = 1000)
      # width = 175)

  # pip install rice
  # pip install pygments-style-solarized
  options(
    rice.color_scheme = "solarizedlight",
    rice.auto_indentation = FALSE,
    rice.editing_mode = "vi")

  # turn on completion of installed package names
  utils::rc.settings(ipck = TRUE)

  options(menu.graphics=FALSE) #graphics dialogs always seem to crash R
  options(vimcom.verbose = 1, vimcom.allnames = TRUE)
  #options(editor = 'vim -c "set ft=r"')

  # Start editor in existing neovim buffer
  # pi3 install neovim-remote
  # https://github.com/mhinz/neovim-remote
  options("editor" = "nvr")

  #options(pager = "less")
  if(Sys.getenv("VIMRPLUGIN_TMPDIR") != "")
    library(vimcom)
  if(Sys.getenv("TERM") != "linux" && Sys.getenv("TERM") != "")
    #setOutputColors256(verbose = FALSE)
  if(nchar(Sys.getenv("DISPLAY")) > 1){
    grDevices::X11.options(width = 4.5, height = 4, ypos = 0,
                           xpos = 1000, pointsize = 10)
#    options(editor = 'gvim -f -c "set ft=r"')
#    options(pager = "gvim -c 'set ft=rdoc' -")
  }
  withOptions <- function(optlist, expr)
  {
    oldopt <- options(optlist)
    on.exit(options(oldopt))
    expr <- substitute(expr)
    eval.parent(expr)
  }

  less = function(x) {
    withOptions(list(pager='less', dplyr.print_min=.Machine$integer.max, width=10000, max.print=1e6), page(x, method='print'))
  }

  # Assign shortcuts to a hidden environment, so they don't show up in ls()
  # Idea from https://csgillespie.github.io/efficientR/set-up.html#creating-hidden-environments-with-.rprofile
  .env <- new.env()
  with(.env, {
      shortcut <- function(f) structure(f, class = "shortcut")
      print.shortcut <- function(f, ...) f(...)

      p <- shortcut(covr::package_coverage)

      rs <- shortcut(function(file = "script.R", echo = TRUE, ...) source(file, echo = echo, ...))

      li <- shortcut(library)
      l <- shortcut(devtools::load_all)

      i <- shortcut(devtools::install)
      gh <- shortcut(devtools::install_github)

      id <- shortcut(function(dependencies = TRUE, ...) {
          devtools::install_deps(dependencies = dependencies, ...)
          })

      ch <- shortcut(function(document = FALSE, ...) {
          devtools::check(document = document, ...)
          })
      d <- shortcut(devtools::document)

# gaborcsardi/tracer
      #tb <- shortcut(tracer::tb)

        t <- shortcut(
          test <- function(filter = NULL, length = 5, pkg = ".", ..., reporter = "progress") {
            if (is.null(reporter)) {
            #reporter <- testthat::SummaryReporter$new()
            #reporter$max_reports = length
            #reporter <- testthat:::ProgressReporter$new()
            }
            devtools::test(pkg, filter, reporter = reporter, ...)
            })

# jennybc/reprex
      re <- shortcut(reprex::reprex)

        qt <- shortcut(function() {
            savehistory()
            base::q(save="no")
            })

      echo <- function(x) {
        cat(readLines(x), sep = "\n")
      }
  })
  # We need to attach stats before .env to shadow qt
  library(stats)
  suppressMessages(attach(.env))
  #library(ggplot2)

  #use white backgrounds
  #theme_set(theme_bw())

  ##colorblind palette
  #cb_palette <-c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

  #use color brewer as default discrete colors
  #scale_colour_discrete <- function(...) scale_color_brewer(palette="Set1", ...)
  #scale_fill_discrete <- function(...) scale_fill_brewer(palette="Set1", ...)

  #log_ticks <- function(which="xy", ...){
    #require(scales)
    #object = list()
    #location = ''
    #if(grepl('x', which)){
      #object = list(object, 
                    #scale_x_log10(breaks=trans_breaks("log10", function(x) 10^x), 
                                  #labels=trans_format("log10",math_format(10^.x)),
                                  #minor_breaks=trans_breaks("log10", function(x) 10^x/2)
                                  #)
                    #)
      #location = paste(location, 'b', sep='')
    #}
    #if(grepl('y', which)){
      #object = list(object, 
                    #scale_y_log10(breaks=trans_breaks("log10", function(x) 10^x), 
                                  #labels=trans_format("log10",math_format(10^.x)),
                                  #minor_breaks=trans_breaks("log10", function(x) 10^x/2)
                                  #)
                    #)
      #location = paste(location, 'l', sep='')
    #}
    #list(annotation_logticks(..., sides=location), object)
  #}

  # library(devtools)

  # helper function to convert a data frame print output to an actual data frame
  .env$convert_data.frame <- function(x) {
    lines <- strsplit(x, "\n")[[1]]

    locs <- rex::re_matches(lines[1], rex::rex(non_spaces), global = TRUE, locations = TRUE)[[1]]

    rowname_size <- rex::re_matches(lines[length(lines)], rex::rex(non_spaces), locations = TRUE)

    starts <- c(rowname_size$end + 1, locs$end[-length(locs$end)] + 1)
    ends <- locs$end

    remove_whitespace <- function(x) {
      re_substitutes(x, rex::rex(list(start, any_spaces) %or% list(any_spaces, end)), '', global = TRUE)
    }

    fields <- lapply(lapply(lines, substring, starts, ends), remove_whitespace)

    df <- as.data.frame(matrix(unlist(fields[-1]), ncol = length(fields[[1]]), byrow = TRUE), stringsAsFactors = FALSE)
    df[] <- lapply(df, type.convert, as.is=TRUE)
    colnames(df) <- fields[[1]]
    df
  }

  .env$shuf <- function(x, n = 6) {
    if (is.null(dim(x))) {
      x[sample.int(length(x), min(n, length(x)))]
    } else {
      x[sample.int(NROW(x), min(n, NROW(x))), , drop = FALSE]
    }
  }

  .env$`%>%` <- magrittr::`%>%`


  invisible({
    # devtools::install_github("gaborcsard/notifier")
    notify_long_running <- function(second_cutoff = 20) {
      last <- proc.time()[1]
      function(expr, value, ok, visible) {
        duration <- proc.time()[1] - last
        if (duration > second_cutoff) {
          notifier::notify(msg = paste0(collapse = " ", deparse(expr)), title = sprintf("Completed in %.02f (s)", duration))
        }
        last <<- proc.time()[1]
        TRUE
      }
    }

    addTaskCallback(notify_long_running())
  })

  # jimhester/lookup
  suppressPackageStartupMessages(library(lookup))

  # jimhester/autoinst
  options(error = autoinst::autoinst)

  # RStudio colors
  #options("crayon.enabled" = TRUE, "crayon.colors" = 256)

}

# devtools options

options(
  devtools.name = "Jim Hester",
  devtools.desc.author = 'person("Jim", "Hester", email = "james.f.hester@gmail.com", role = c("aut", "cre"))',
  devtools.desc.license = "GPL-3",
  covr.gcov = Sys.which("gcov")
)
