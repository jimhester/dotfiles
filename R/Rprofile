# .Rprofile -- commands to execute at the beginning of each R session
#
# You can use this file to load packages, set options, etc.
#
# NOTE: changes in this file won't be reflected until after you quit
# and start a new session
#

if(interactive()){
  library(colorout)
  library(setwidth)
  options(vimcom.verbose = 1, vimcom.allnames = TRUE)
  options(editor = 'vim -c "set ft=r"')
  options(pager = "vimrpager")
  if(Sys.getenv("VIMRPLUGIN_TMPDIR") != "")
    library(vimcom)
  if(Sys.getenv("TERM") != "linux" && Sys.getenv("TERM") != "")
    setOutputColors256(verbose = FALSE)
  if(nchar(Sys.getenv("DISPLAY")) > 1){
    grDevices::X11.options(width = 4.5, height = 4, ypos = 0,
                           xpos = 1000, pointsize = 10)
#    options(editor = 'gvim -f -c "set ft=r"')
#    options(pager = "gvim -c 'set ft=rdoc' -")
  }
  require(ggplot2)

  #use white backgrounds
  theme_set(theme_bw())

  #colorblind palette
  cb_palette <-c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

  #use color brewer as default discrete colors
  scale_colour_discrete <- function(...) scale_color_brewer(palette="Set1", ...)
  scale_fill_discrete <- function(...) scale_fill_brewer(palette="Set1", ...)

  #set Rstudio markdown function
  options(rstudio.markdownToHTML =
          function(inputFile, outputFile) {
            require(markdown)
            markdownToHTML(inputFile, outputFile, 
                           stylesheet='~/share/knitr_bootstrap.css',
                           header='~/share/knitr_bootstrap.html',
                           options=c('skip_style', 'base64_images', 'use_xhtml')
                           )
          }
  )

  log_ticks <- function(which="xy", ...){
    require(scales)
    object = list()
    location = ''
    if(grepl('x', which)){
      object = list(object, 
                    scale_x_log10(breaks=trans_breaks("log10", function(x) 10^x), 
                                  labels=trans_format("log10",math_format(10^.x)),
                                  minor_breaks=trans_breaks("log10", function(x) 10^x/2)
                                  )
                    )
      location = paste(location, 'b', sep='')
    }
    if(grepl('y', which)){
      object = list(object, 
                    scale_y_log10(breaks=trans_breaks("log10", function(x) 10^x), 
                                  labels=trans_format("log10",math_format(10^.x)),
                                  minor_breaks=trans_breaks("log10", function(x) 10^x/2)
                                  )
                    )
      location = paste(location, 'l', sep='')
    }
    list(annotation_logticks(..., sides=location), object)
  }
}
