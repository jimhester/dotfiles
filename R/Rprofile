#options(repos = 'https://cloud.r-project.org')
options(repos = c(NFLX = "http://repo.test.netflix.net/netflix-cran")
#    , CRAN="https://cloud.r-project.org")
)
# .Rprofile -- commands to execute at the beginning of each R session
#
# You can use this file to load packages, set options, etc.
#
# NOTE: changes in this file won't be reflected until after you quit
# and start a new session
#
if(interactive() && requireNamespace("rlang", quietly = TRUE)) {
  options("Ncpus" = 16L)


  if (file.exists("~/.Rprofile.local")) {
    source("~/.Rprofile.local")
  }

  options(warnPartialMatchAttr = TRUE,
          warnPartialMatchDollar = TRUE,
          warn = 1,
          warning.length = 8170) # 8170 is the maximum warning length

  options(max.print = 1000,
       width = 120)

  # pip install -U radian
  # pip install pygments-style-solarized
  options(
    radian.prompt = "\033[0;34m>\033[0m ",
    radian.color_scheme = "solarized-light",
    radian.auto_indentation = FALSE,
    radian.editing_mode = "vi",
    radian.show_vi_mode_prompt = FALSE,
    radian.history_search_no_duplicates = TRUE)

  # turn on completion of installed package names
  utils::rc.settings(ipck = TRUE)

  options(menu.graphics=FALSE) #graphics dialogs always seem to crash R
  options(vimcom.verbose = 1, vimcom.allnames = TRUE)

  # Start editor in existing neovim buffer
  # pi3 install neovim-remote
  # https://github.com/mhinz/neovim-remote
  options("editor" = "nvr")

  #options(pager = "less")
  if(Sys.getenv("VIMRPLUGIN_TMPDIR") != "")
    library(vimcom)
  if(Sys.getenv("TERM") != "linux" && Sys.getenv("TERM") != "")
    #setOutputColors256(verbose = FALSE)
  if(nchar(Sys.getenv("DISPLAY")) > 1){
    grDevices::X11.options(width = 4.5, height = 4, ypos = 0,
                           xpos = 1000, pointsize = 10)
#    options(editor = 'gvim -f -c "set ft=r"')
#    options(pager = "gvim -c 'set ft=rdoc' -")
  }
  withOptions <- function(optlist, expr)
  {
    oldopt <- options(optlist)
    on.exit(options(oldopt))
    expr <- substitute(expr)
    eval.parent(expr)
  }

  less = function(x) {
    withOptions(list(pager='less', dplyr.print_min=.Machine$integer.max, width=10000, max.print=1e6), page(x, method='print'))
  }

  # Assign shortcuts to a hidden environment, so they don't show up in ls()
  # Idea from https://csgillespie.github.io/efficientR/set-up.html#creating-hidden-environments-with-.rprofile
  .shortcut_env <- new.env()
  with(.shortcut_env, {
    shortcut <- function(f) structure(f, class = "shortcut")
    print.shortcut <- function(f, ...) {
      res <- withVisible(f(...))
      if (res$visible) {
        print(res$value)
      }
      res$value
    }

      gr <- shortcut(usethis::git_default_branch_rediscover)
      bt <- shortcut(rlang::last_error)
      p <- shortcut(covr::package_coverage)

      rs <- shortcut(function(file = "script.R", echo = TRUE, ...) source(file, echo = echo, ...))

      li <- shortcut(library)
      l <- shortcut(pkgload::load_all)
      cl <- shortcut(function(path = ".", ...) {
        pkgbuild::clean_dll(path)
        pkgload::load_all(path,...)
      })

      i <- shortcut(function(path = ".", ..., upgrade = FALSE, quick = TRUE) devtools::install(path, ..., upgrade = upgrade, quick = quick))

      gh <- shortcut(remotes::install_github)

      id <- shortcut(function(...) {
        pak::local_install_dev_deps()
          })

      ch <- shortcut(function(..., document = FALSE, incoming = TRUE) {
          devtools::check(..., document = document, incoming = incoming)
      })

      d <- shortcut(devtools::document)

        t <- shortcut(
          test <- function(filter = NULL, length = 5, pkg = ".", ..., reporter = "progress") {
            devtools::test(pkg, filter, reporter = reporter, ...)
          })

      # jennybc/reprex
      if (requireNamespace("reprex")) {
      re <- shortcut(reprex::reprex)
      }

      qt <- shortcut(function() {
        savehistory()
        base::q(save="no")
      })

      echo <- function(x) {
        cat(readLines(x), sep = "\n")
      }

      gp <- function(package) {
        gh_url <- usethis:::github_url(package)
        usethis::create_from_github(gh_url, fork = TRUE)
        pak::local_install_deps(ask = FALSE)
  }
  })
  # We need to attach stats before .shortcut_env to shadow qt
  library(stats)
  suppressMessages(attach(.shortcut_env))
  registerS3method("print", "shortcut", print.shortcut)

  # library(devtools)
  #requireNamespace("devtools")

  # helper function to convert a data frame print output to an actual data frame
  .shortcut_env$convert_data.frame <- function(x) {
    lines <- strsplit(x, "\n")[[1]]

    locs <- rex::re_matches(lines[1], rex::rex(non_spaces), global = TRUE, locations = TRUE)[[1]]

    rowname_size <- rex::re_matches(lines[length(lines)], rex::rex(non_spaces), locations = TRUE)

    starts <- c(rowname_size$end + 1, locs$end[-length(locs$end)] + 1)
    ends <- locs$end

    remove_whitespace <- function(x) {
      re_substitutes(x, rex::rex(list(start, any_spaces) %or% list(any_spaces, end)), '', global = TRUE)
    }

    fields <- lapply(lapply(lines, substring, starts, ends), remove_whitespace)

    df <- as.data.frame(matrix(unlist(fields[-1]), ncol = length(fields[[1]]), byrow = TRUE), stringsAsFactors = FALSE)
    df[] <- lapply(df, type.convert, as.is=TRUE)
    colnames(df) <- fields[[1]]
    df
  }

  .shortcut_env$shuf <- function(x, n = 6) {
    if (is.null(dim(x))) {
      x[sample.int(length(x), min(n, length(x)))]
    } else {
      x[sample.int(NROW(x), min(n, NROW(x))), , drop = FALSE]
    }
  }

  .shortcut_env$`%>%` <- magrittr::`%>%`


  invisible({
    # devtools::install_github("gaborcsardi/notifier")
    notify_long_running <- function(second_cutoff = 20) {
      last <- proc.time()[1]
      function(expr, value, ok, visible) {
        duration <- proc.time()[1] - last
        if (duration > second_cutoff) {
          notifier::notify(msg = paste0(collapse = " ", deparse(expr)), title = sprintf("Completed in %.02f (s)", duration))
        }
        last <<- proc.time()[1]
        TRUE
      }
    }

    addTaskCallback(notify_long_running())
  })

  # jimhester/lookup
  #suppressPackageStartupMessages(library(lookup))

  # jimhester/autoinst
  #options(error = autoinst::autoinst)

  # RStudio colors
  #options("crayon.enabled" = TRUE, "crayon.colors" = 256)

  #library(conflicted)

  pblapply <- function(x, FUN, ..., .format = "[:bar] :percent eta: :eta") {
    n <- length(x)
    bar <- progress::progress_bar$new(total = n, format = .format)
    res <- list(n)
    for (i in seq_len(n)) {
      res[[i]] <- FUN(x[[i]])
      bar$tick()
    }
    res
  }

  ins <- function(...) .Internal(inspect(...))

  #if (requireNamespace("rdoc")) {
    #library(utils)
    #rdoc::use_rdoc()
  #}

  if (requireNamespace("rlang")) {
    options(
      rlang_backtrace_on_error = "branch",
      error = rlang::entrace
    )
  }
}

# devtools options

options(
  usethis.full_name = "Jim Hester",
  usethis.description = list(
    `Authors@R` = 'c(person("Jim", "Hester", email = "james.f.hester@gmail.com", role = c("aut", "cre"),
    comment = c(ORCID = "0000-0002-2739-7082")),
    person("RStudio", role = c("cph", "fnd"))
    )',
    License = "MIT + file LICENSE",
    Version = "0.0.0.9000"
  ),
  usethis.protocol = "ssh",
  covr.gcov = Sys.which("gcov")
)

# Reprex options

options(
  show.error.locations= TRUE,
  keep.source = TRUE,
  keep.source.pkgs = TRUE,
  reprex.highlight.hl_style  = "solarized-light",
  reprex.highlight.font      = "Source Code Pro",
  reprex.highlight.font_size = 50,
  usethis.destdir = "~/pkg"
)
#### nflxmetatron start ####
if (interactive() && requireNamespace("nflxmetatron", quietly = TRUE)) {
  options(rsconnect.http = nflxmetatron:::httpMetatronCurl)
  options(packrat.dependency.discovery.renv = FALSE)
}
#### nflxmetatron end ####
