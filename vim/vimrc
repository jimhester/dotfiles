" ----------------------------------------------------------------------
"   Jim Hester
"   vimrc
"   last changed:
"   Modified: 2012 Sep 13
"   Adapted from Ethan Schoonover's vimrc
"   git://github.com/altercation/es-etc.git
" ----------------------------------------------------------------------
" Environment               {{{
" ----------------------------------------------------------------------
    " Setup Bundle Support  {{{
    " ------------------------------------------------------------------
        " This allows all vim plugins to be stored in individual subdirectories 
        " of the vim runtime 'bundles' subdirectory. See pathogen docs for 
        " details.
        " filetype off
        "runtime! autoload/pathogen.vim
        "call pathogen#runtime_append_all_bundles()
        "call pathogen#helptags()
        call pathogen#infect()
        filetype plugin indent on
        " comment out the following to activate the haskell conceal plugin
        "let g:no_haskell_conceal = 1
    " }}}
    " Filetype Settings     {{{
    " ------------------------------------------------------------------
    " }}}
    " Colors                {{{
    " ------------------------------------------------------------------
        let g:solarized_visibility="low"
        let g:solarized_termtrans=1
        syntax enable               " syntax highlighting on
        set background=light
        colorscheme solarized       " detects background value (light/dark)
    " }}}
    " Directories           {{{
    " ------------------------------------------------------------------
        " backup and swap directories rely on variable set in zshenv
        set backup                  " enable backups
        set backupdir=$DATA_PATH/vim/backup// " backups
        set directory=$DATA_PATH/vim/swap//   " swap files
        set undofile  " use persistent undofile
        "set autochdir " always switch to the current file's dir
    " }}}
    " Environment           {{{
    " ------------------------------------------------------------------
        set nocompatible            " explicitly leave vi-compatibility mode
        "set encoding=utf-8          " unicode encoding by default
        set title                   " show title in terminal
        set clipboard+=unnamed      " unnamed buffer set to gui register *
                                    " so that dd == "*dd
        set hidden                  " buffers hidden, not closed, when abandoned
        set undoreload=10000
                                    " save the whole buffer for undo when
                                    " reloading it.  This applies to the ":e!"
                                    " command and reloading for when the buffer
                                    " buffer changed outside of Vim.
        set noexrc                  " don't use local version of .(g)vimrc, .exrc
    " }}}
    " Compatible Options    {{{
    " ------------------------------------------------------------------
        set cpoptions=aABceFsmq
        "             |||||||||
        "             ||||||||`---- When joining lines, leave the cursor 
        "             ||||||||      between joined lines
        "             ||||||||
        "             |||||||`----- When a new match is created (showmatch) 
        "             |||||||       pause for .5
        "             |||||||
        "             ||||||`------ Set buffer options when entering the buffer
        "             ||||||
        "             |||||`------- :write command updates current file name
        "             |||||
        "             ||||`-------- Automatically add <CR> to the last line 
        "             ||||          when using :@r
        "             ||||
        "             |||`--------- Searching continues at the end of the match 
        "             |||           at the cursor position
        "             |||
        "             ||`---------- A backslash has no special meaning in
        "             ||            mappings
        "             ||
        "             |`----------- :write updates alternative file name
        "             |
        "             `------------ :read updates alternative file name
    " }}}
    " }}}
" Vim UI                    {{{
" ----------------------------------------------------------------------
    " Insert Mode           {{{
    " ------------------------------------------------------------------
        set backspace=indent,eol,start " make backspace more flexible
    " }}}
    " Search                {{{
    " ------------------------------------------------------------------
        set hlsearch                " highlight searched for phrases
        set incsearch               " BUT do highlight as you type
        set ignorecase              " case insensitive search for lowercase...
        set smartcase               " ...but if mixed case, go case-sensitive
    " }}}
    " Location Indicators   {{{
    " ------------------------------------------------------------------
        set nocursorcolumn          " highlight the current column, off
        set cursorline              " highlight current line
        set colorcolumn=81
        set number                  " turn on line numbers
        set numberwidth=5           " we are good up to 99999 lines
        set relativenumber " use relative line numbers
    " }}}
    " Screen Drawing        {{{
    " ------------------------------------------------------------------
        set linespace=0             " don't insert extra pixel lines betweens rows
        set lazyredraw              " do not redraw while running macros
        set ttyfast                 " fast redraw screen
    " }}}
    " Character Display     {{{
    " ------------------------------------------------------------------
        set list                " show nonprinting chars (set with listchars)
        "set listchars=eol:¬,extends:»,tab:▸\ ,trail:›
        set noshowmatch         " don't match brackets (using matchparen instd)
                                " see 'set matchtime' if using showmatch
    " }}}
    " Navigation, Movement  {{{
    " ------------------------------------------------------------------
        set nostartofline       " cursor can stay on blank characters
        set scrolloff=5         " keep 10 lines (top/bottom) for scope 
    " Completion            {{{
    " ------------------------------------------------------------------
        " set completeopt=      " don't use a pop up menu for completions
        "set wildchar=<Tab>      " type to start wildcard expansion in the
                                " command-line (tab is default)
        set wildmenu            " command-line completion enhanced mode
        "set wildmode=list:longest  " When more than one match, list all and
                                " complete till longest common string.
        set wildmode=longest:full   " complete till longest common string
                                " if this doesn't result in a longer string,
                                " use the next part (also start 'wildmenu')
    " }}}
    " Status Indicators     {{{
    " ------------------------------------------------------------------
        set showcmd             " show the command being typed
        set showmode            " show insert, replace, visual mode indicator
        set laststatus=2        " always show the status line
        set visualbell          " blink
        set report=0            " report this or greater number of changed lines
        set ruler               " always show current positions along the bottom
    " }}}
    " Short Message Format  {{{
    " ------------------------------------------------------------------
        " shortens messages to avoid 'press a key' prompt
        set shortmess=aOtsT  
        "             |||||
        "             ||||`--T- truncate other messages in the middle if they
        "             ||||      are too long to fit on the command line.
        "             ||||      "..." will appear in the middle.
        "             ||||
        "             |||`---s- no "search hit BOTTOM, continuing at TOP" or
        "             |||       "search hit TOP, continuing at BOTTOM" messages
        "             |||
        "             ||`----t- truncate file message at start if it is too long
        "             ||        to fit on command-line, "<" will appear in the
        "             ||        left most column.  Ignored in Ex mode.
        "             ||
        "             |`-----O- message for reading a file overwrites previous
        "             |         message. Also for quickfix message (eg, ":cn").
        "             |
        "             `------a- all of the following abbreviations
        "                       f = use "(3 of 5)" not "(file 3 of 5)"
        "                       i = use "[noeol]" not "[Incomplete last line]"
        "                       l = use "999L, 888C" not "999 lines, " etc.
        "                       m = use "[+]" not "[Modified]"
        "                       n = use "[New]" not "[New File]"
        "                       r = use "[RO]" not "[readonly]"
        "                       w = use "[w]" not "written" for file write mssg
        "                       a = nd "[a]" not "appended" for ':w >> file' cmd
        "                       x = use "[dos]" not "[dos format]", "[unix]" not
        "                           "[unix format]" & "[mac]" not "[mac format]"
    " }}}
    " Statusline Format     {{{
    " ------------------------------------------------------------------
        "set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)
        "set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%]\ [\ %05l\ %03v\ ]
        set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%]\ line:%l\/%L\ col:%v
        "              | | | | |  |   |      |  |     |    |
        "              | | | | |  |   |      |  |     |    `- current column
        "              | | | | |  |   |      |  |     |
        "              | | | | |  |   |      |  |     `------ current line
        "              | | | | |  |   |      |  |
        "              | | | | |  |   |      |  `------------ % into file
        "              | | | | |  |   |      |
        "              | | | | |  |   |      `--------------- current syntax in 
        "              | | | | |  |   |                       square brackets
        "              | | | | |  |   |
        "              | | | | |  |   `---------------------- current fileformat
        "              | | | | |  |
        "              | | | | |  `-------------------------- number of lines
        "              | | | | |
        "              | | | | `----------------------------- preview flag in
        "              | | | |                                square brackets
        "              | | | |
        "              | | | `------------------------------- help flag in
        "              | | |                                  square brackets
        "              | | |
        "              | | `--------------------------------- readonly flag in
        "              | |                                    square brackets
        "              | |
        "              | `----------------------------------- modified flag in
        "              |                                      square brackets
        "              |
        "              `------------------------------------- full path to file
        "                                                     in the buffer
    " }}}
    " Folding               {{{
    " ------------------------------------------------------------------
        set foldenable          " Turn on folding
        set foldmethod=marker   " Fold on the marker
        function! MyFoldText()
            let line = getline(v:foldstart)
            let nucolwidth = &fdc + &number * &numberwidth
            let windowwidth = winwidth(0) - nucolwidth - 3
            let foldlinecount = v:foldend - v:foldstart
            " expand tabs into spaces
            let onetab = strpart('          ', 0, &tabstop)
            let line = substitute(line, '\t', onetab, 'g')
            let line = strpart(line, 0, windowwidth - 2 -len(foldlinecount))
            let fillcharcount = windowwidth - len(line) - len(foldlinecount) - 4
            let fillchars = repeat(" ",fillcharcount)
            return line . '…' . fillchars . '…' . foldlinecount
        endfunction
        set foldtext=MyFoldText()
        set foldlevel=100
    " }}}
" }}}
" Text Formatting/Layout    {{{
" ----------------------------------------------------------------------
    " Wrap and Indent       {{{
    " ------------------------------------------------------------------
        set wrap                " soft wrap long lines
        set textwidth=79        " maximum width of text line during insert 
        set autoindent          " copy indent from current when starting a new line
    " }}}
    " Tabs                  {{{
    " ------------------------------------------------------------------
        set expandtab           " convert tabs into spaces
        set tabstop=8           " real tabs should be 8 (unix default)
        set softtabstop=2       " tab conversion to number of spaces
        set shiftwidth=2        " auto-indent amount when using cindent, >>, <<
        set shiftround          " when at 3 spaces, and I hit > ... go to 4, not 5
    " }}}
    " Format Options        {{{
    " ------------------------------------------------------------------
        set formatoptions=croqwan1b
        "set formatoptions=aw
        " tcq   default options if not set here
        "
        " t -   Auto-wrap text using textwidth
        " c +   Auto-wrap comments using textwidth, inserting the current
        "       comment leader automatically.
        " r +   Automatically insert the current comment leader after hitting
        "       <Enter> in Insert mode.
        " o +   Automatically insert the current comment leader after hitting 
        "       'o' or 'O' in Normal mode.
        " q +   Allow formatting of comments with "gq".
        "       Note that formatting will not change blank lines or lines 
        "       containing only the comment leader.  A new paragraph starts
        "       after such a line, or when the comment leader changes.
        " w +   Trailing white space indicates a paragraph continues in the
        "       next line. A line that ends in non-whitespace ends a paragraph.
        " a +   Automatic formatting of paragraphs.  Every time text is
        "       inserted or deleted the paragraph will be reformatted.
        "       See |auto-format|.
        "       When the 'c' flag is present this only happens for recognized
        "       comments.
        " n +   When formatting text, recognize numbered lists.  This actually
        "       uses the 'formatlistpat' option, thus any kind of list can be
        "       used. The indent of the text after the number is used for the 
        "       next line. The default is to find a number, optionally followed
        "       by '.', ':', ')', " ']' or 'curly bracket'.  Note that 
        "       'autoindent' must be set too.  Doesn't work well with "2".
        "           Example: >
        "               1. the first item
        "                  wraps
        "               2. the second item
        " 2 -   When formatting text, use the indent of the second line of a 
        "       paragraph for the rest of the paragraph, instead of the indent
        "       of the first line. This supports paragraphs in which the first
        "       line has a different indent than the rest.  Note that 
        "       'autoindent' must be set too.  Example: >
        "
        "                   first line of a paragraph
        "           second line of the same paragraph
        "           third line.
        " v -   Vi-compatible auto-wrapping in insert mode: Only break a line
        "       at a blank that you have entered during the current insert 
        "       command.  (Note: this is not 100% Vi compatible.  Vi has some
        "       "unexpected features" or bugs in this area.  It uses the screen
        "       column instead of the line column.)
        " b +   Like 'v', but only auto-wrap if you enter a blank at or before
        "       the wrap margin.  If the line was longer than 'textwidth' when
        "       you started the insert, or you do not enter a blank in the
        "       insert before reaching 'textwidth', Vim does not perform
        "       auto-wrapping.
        " l -   Long lines are not broken in insert mode: When a line was
        "       longer than 'textwidth' when the insert command started, Vim
        "       does not automatically format it.
        " m -   Also break at a multi-byte character above 255.  This is useful
        "       for Asian text where every character is a word on its own.
        " M -   When joining lines, don't insert a space before or after a
        "       multi-byte character.  Overrules the 'B' flag.
        " B -   When joining lines, don't insert a space between two multi-byte
        "       characters.  Overruled by the 'M' flag.
        " 1 +   Don't break a line after a one-letter word. It's broken before
        "       it instead (if possible).
    " }}}
    " }}}
" Maps & Functions          {{{
" ----------------------------------------------------------------------
    " Colemak               {{{
        source ~/.colemak/vimrc
    "}}}"
    " Leader/nops/escape    {{{
    " ------------------------------------------------------------------
        " redefine leader from default backslash
        let mapleader = "\<Space>"
        let maplocalleader = "\<Space>"
        " turn off manual key
        nnoremap K <nop>
        inoremap aa <Esc>"'^
    " }}}
    " Search, Copy, Replace {{{
    " ------------------------------------------------------------------
        " kill search highlight with leader-slash
        map <leader>/ :noh<cr>
        " immediately enter very-magic mode when searching
        nnoremap / /\v
        vnoremap / /\v
        " make Y conform to C/D conventions and act on cursor-to-eol
        nnoremap Y y$
    " }}}
    " Highlighting          {{{
    " ------------------------------------------------------------------
        " Syntax              {{{
        " Show syntax highlighting groups for word under cursor
        nmap <C-S-P> :call <SID>SynStack()<CR>
        function! <SID>SynStack()
            if !exists("*synstack")
                return
            endif
            echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
        endfunc
        " }}}
        " Hex Colors        {{{
        if exists('*HexHighlight()')
            nmap <leader>h :call HexHighlight()<Return>
        endif
        " }}}
    " }}}
    " Mouse                 {{{
    " ------------------------------------------------------------------
      set mouse=a
      " }}}
    " Pentadactyl                 {{{
    " ------------------------------------------------------------------
      map <c-h> <BS>
      cmap <c-h> <BS>
      " }}}
    " Toggle Indicators     {{{
    " ------------------------------------------------------------------
    " We'll use &number and &relativenumber (mutually eclusive) as proxies for 
    " the toggle state of all our preferred indicator UI
        function! ToggleIndicators()
            if (&number || &relativenumber) " turn off indicators
                let b:IndicatorNumber = 0
                let b:IndicatorRelativeNumber = 0
                let b:IndicatorCursorColumn = 0
                let b:IndicatorCursorLine = 0
                let b:IndicatorColorColumn = 0
                let b:IndicatorLastStatus = 0
                if &number
                    let b:IndicatorNumber = 1
                    set nonumber
                else " must be relativenumber
                    let b:IndicatorRelativeNumber = 1
                    set norelativenumber
                endif
                if &cursorcolumn==1
                    let b:IndicatorCursorColumn = 1
                    set nocursorcolumn
                endif
                if &cursorline
                    let b:IndicatorCursorLine = 1
                    set nocursorline
                endif
                if &colorcolumn > 0
                    let b:IndicatorColorColumn = &colorcolumn
                    set colorcolumn=0
                endif
                if &laststatus > 0
                    let b:IndicatorLastStatus = &laststatus
                    set laststatus=0
                endif
            else                            " turn on indicators
                if b:IndicatorNumber
                    set number
                else " must be relativenumber
                    set relativenumber
                endif
                if b:IndicatorCursorColumn
                    set cursorcolumn
                endif
                if b:IndicatorCursorLine
                    set cursorline
                endif
                if b:IndicatorColorColumn > 0
                    exe "set colorcolumn=" . b:IndicatorColorColumn
                endif
                if b:IndicatorLastStatus > 0
                    exe "set laststatus=" . b:IndicatorLastStatus
                endif
            endif
        endfunction
        nnoremap <F3> :call ToggleIndicators()<CR>
        inoremap <F3> <ESC>:call ToggleIndicators()<CR>a
        vnoremap <F3> <ESC>:call ToggleIndicators()<CR>
    " }}}
    " Toggle CursorColumn   {{{
        nnoremap <F4> :set invcursorcolumn<CR>
        inoremap <F4> <ESC>:set invcursorcolumn<CR>a
        vnoremap <F4> <ESC>:set invcursorcolumn<CR>
    " }}}
    " Timestamp             {{{
    " ------------------------------------------------------------------
    let g:timestamp_username="Jim Hester"
    let g:timestamp_modelines=15
    let g:timestamp_rep='%Y %b %d'
    let g:timestamp_regexp='\c\%(\<\%(last \)\?\%(changed?\|modified\):\s\+\)\@<=\%(\d\{4}\D.\{-}\d\{2}\|TIMESTAMP\)'
    " Completion            {{{
    " ------------------------------------------------------------------
        set ofu=syntaxcomplete#Complete
    " }}}"
    " Perl                  {{{
    " ------------------------------------------------------------------
        "to tidy the code"
        nnoremap <silent> \t :%!perltidy -q<enter>
        vnoremap <silent> \t :!perltidy -q<enter>

        "to deparse code"
        nnoremap <silent> \d :.!perl -mo=deparse 2>/dev/null<cr>
        vnoremap <silent> \d :!perl -mo=deparse 2>/dev/null<cr>

        let perl_include_pod   = 1    "include pod.vim syntax file with perl.vim"
        let perl_extended_vars = 1    "highlight complex expressions such as @{[$x, $y]}"
        let perl_sync_dist     = 250  "use more context for highlighting"
" }}}
set tags+=~/.vim/tags/cpp
set tags+=~/.vim/tags/qt
map <C-F12> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

 "OmniCppComplete
 let OmniCpp_NamespaceSearch = 1
 let OmniCpp_GlobalScopeSearch = 1
 let OmniCpp_ShowAccess = 1
 let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
 let OmniCpp_MayCompleteDot = 1 " autocomplete after .
 let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
 let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
 let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]

 " automatically open and close the popup menu / preview window
 au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
 set completeopt=menuone,menu,longest,preview"

"supertab
let g:SuperTabDefaultCompletionType = "<C-X><C-O>"
"let g:SuperTabDefaultCompletionType = "context"

nnoremap <Leader>x yyp:.!sh<Enter> 
"let vimrplugin_notmuxconf = 1

"Vim-R
"do not allow insert mode commands
let g:vimrplugin_insert_mode_cmds = 0
let vimrplugin_notmuxconf = 1
imap <C-A> <Plug>RCompleteArgs

map <silent> <LocalLeader>h :call RAction("head")<CR>
map <silent> <LocalLeader>le :call RAction("levels")<CR>
map <silent> <LocalLeader>di :call RAction("dim")<CR>
