extends perl

snippet dumper "print debug message"
use Data::Dumper;
warn Dumper($0);
endsnippet

snippet bench "benchmark using cmpthese"
use Benchmark qw(cmpthese);

cmpthese(${1:1000}, {
  '${2:name}' => sub { $0 },
});
endsnippet

snippet filebar "Use FileBar to make a file progress bar"
use FileBar;
my $bar = FileBar->new($0);
endsnippet

snippet fastx "Fastx reader"
use ReadFastx;
my $${1:fastx} = ReadFastx->new($3);
while(my $${2:seq} = $$1->next_seq){
  $0
}
endsnippet

snippet sam "Sam/Bam reader"
use ReadSam;
my $${1:sam} = ReadSam->new($3);
while(my $${2:align} = $$1->next_align){
  $0
}
endsnippet

snippet open "Open file and parse" !b
open my($${1:in}), "${2:<}", "${3:filename}";
while(<$$1>){
  $0
}
endsnippet

snippet sub "Subroutine definition with arguments" !b
sub ${1:name} {
  ${2:my ($self) = shift;}
  ${3:my $args = @_ == 1 && ref $_[0] ? $_[0] : { @_ };}
  $0
}
endsnippet

snippet no_ext "Subroutine to remove an extension" !b
sub no_extension {
  my (\$path) = @_;
  \$path =~ s{\..*}{};
  return $path;
}
endsnippet

snippet base "Subroutine to remove directory information" !b
sub base {
  my (\$path) = @_;
  \$path =~ s{.*/}{};
  return $path;
}
endsnippet

snippet cores "Subroutine to get the number of cores on GNU/Linux"
sub no_of_cores_gnu_linux {

  # Returns:
  #   Number of CPU cores on GNU/Linux
  my \$no_of_cores;
  if (-e "/proc/cpuinfo") {
    \$no_of_cores = 0;
    open(IN, "cat /proc/cpuinfo|") || return undef;
    while (<IN>) {
      /^processor.*[:]/ and \$no_of_cores++;
    }
    close IN;
  }
  return \$no_of_cores;
}
endsnippet

snippet test
`echo %`
endsnippet

snippet start "Create a new perl script"
#!/usr/bin/env perl
use warnings;
use strict;
use autodie qw(:all);
###############################################################################
# By Jim Hester
# Created: TIMESTAMP
# Last Modified: TIMESTAMP
# Title:${1:`!v fnamemodify(bufname("%"),":t")`}
# Purpose:${2:Description}
###############################################################################
# Code to handle help menu and man page
###############################################################################
use Getopt::Long;
use Pod::Usage;
my \$man = 0;
my \$help = 0;
GetOptions('help|?' => \\\$help, man => \\\$man) or pod2usage(2);
pod2usage(2) if \$help;
pod2usage(-verbose => 2) if \$man;
pod2usage("\$0: No files given.")  if ((@ARGV == 0) && (-t STDIN));
###############################################################################
# Automatically extract compressed files
###############################################################################
@ARGV = map \{ s/(.*\\.gz)\\s*\$/pigz -dc < \$1|/; s/(.*\\.bz2)\\s*\$/pbzip2 -dc < \$1|/;\$_ } @ARGV;
###############################################################################
# $1
###############################################################################

$0

###############################################################################
# Help Documentation
###############################################################################

=head1 NAME

$1 - $2

=head1 VERSION

0.0.1

=head1 USAGE

Options:
      -help
      -man               for more info

=head1 OPTIONS

=over

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<$1> ${3:$2}

=cut
`!v system("chmod ug+x " . shellescape(expand('%')))``!p vim.command(":write!")`
endsnippet

snippet mys "declare a scalar variable"
my $${2:adjective}${2/.+/_/}${1:noun}${3/.+/ = /}${3:value};
endsnippet

snippet mya "declare an array variable"
my @${1:items}${2/.+/ = qw\(/}${2:value}${2/.+/\)/};
endsnippet
