" Colors {{{
  set background=light
  colorscheme solarized
" }}}
" Colemak               {{{
  source ~/.colemak/vimrc
  let g:LustyJugglerKeyboardLayout = "colemak"
"}}}"
  " Leader/nops/escape    {{{
  " ------------------------------------------------------------------
  " redefine leader from default backslash
  let maplocalleader = "\<Space>"
"}}}

" Search, Copy, Replace {{{
" ------------------------------------------------------------------
  " kill search highlight with leader-slash
  noremap <leader>/ :noh<CR>
  " map leader z to toggle folding
  nnoremap <Leader>z za
  vnoremap <Leader>z za
"}}}
" Timestamp             {{{
" ------------------------------------------------------------------
  let g:timestamp_username="Jim Hester"
  let g:timestamp_modelines=15
  let g:timestamp_rep='%Y %b %d %r'
  let g:timestamp_regexp='\v\c%(<%(last )?%(changed?|modified):\s+)@<=%(\d{4}.*$?)|TIMESTAMP.*$'
" }}}
" Perl                  {{{
" ------------------------------------------------------------------
  "to tidy the code"
  nnoremap <silent> <leader>t :%!perltidy -q<enter>
  vnoremap <silent> <leader>t :!perltidy -q<enter>

  let perl_include_pod   = 1    "include pod.vim syntax file with perl.vim"
  let perl_extended_vars = 1    "highlight complex expressions such as @{[$x, $y]}"
  let perl_sync_dist     = 250  "use more context for highlighting"
" }}}
" R                  {{{
" ------------------------------------------------------------------
  "do not allow insert mode commands
  let g:vimrplugin_insert_mode_cmds = 0
  let vimrplugin_notmuxconf = 1
  let vimrplugin_underscore = 0
  let g:vimrplugin_openhtml = 0

  "bind double leader to send line and selection
  vmap , <Plug>RDSendSelection
  nmap , <Plug>RDSendLine

  "complete arguments
  imap <C-R> <Plug>RCompleteArgs

  nnoremap <silent> <LocalLeader>h :call RAction("head")<CR>
  nnoremap <silent> <LocalLeader>le :call RAction("levels")<CR>
  nnoremap <silent> <LocalLeader>i :call RAction("dim")<CR>
  nnoremap <silent> <LocalLeader>kk :call RMakeHTML_2()<CR>
  function! RMakeHTML_2()
    update
    call RSetWD()
    let filename = expand("%:r:t")
    let rcmd = "require('knitrBootstrap');
      \knit_bootstrap(\"" . filename . ".Rmd\", boot_style='cerulean', code_style='tomorrow night')"
    if g:vimrplugin_openhtml
      let rcmd = rcmd . '; browseURL("' . filename . '.html")'
    endif
    call g:SendCmdToR(rcmd)
  endfunction

  "add external scripts to RMD
  nnoremap <silent> <leader>s :%!add_external_scripts.pl <enter>
  vnoremap <silent> <leader>s :!add_external_scripts.pl <enter>
  "}}}"
" LustyJuggler {{{
" ------------------------------------------------------------------
  let g:LustyJugglerDefaultMappings = 0
  noremap <Leader>b :LustyJuggler<CR>
"}}}
" Gundo {{{
" ------------------------------------------------------------------
  nnoremap <F5> :GundoToggle<CR>
"}}}
" Autoclose {{{
" ------------------------------------------------------------------
  " do not pair quotes when editing vim files
  let g:autoclose_vim_commentmode = 1
"}}}
"
" Autoclose {{{
" ------------------------------------------------------------------
   highlight clear SignColumn
"}}}
" CtrlP {{{
" ------------------------------------------------------------------
  let g:ctrlp_cmd = 'CtrlPMixed'
"}}}
" Modeline {{{
" ------------------------------------------------------------------
  function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
          \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
  endfunction
  nnoremap <silent> <Leader>ml :call AppendModeline()<CR>
"}}}
" Ultisnips {{{
" ------------------------------------------------------------------
  let g:UltiSnipsExpandTrigger='<c-n>'
  let g:UltiSnipsListSnippets='<c-l>'
  let g:UltiSnipsJumpForwardTrigger='<c-n>'
  let g:UltiSnipsJumpBackwardTrigger='<c-e>'
    "let g:UltiSnipsExpandTrigger="<NL>"
    "inoremap <silent> <tab> <C-R>=g:UltiSnips_Complete()<cr>
    "snoremap <silent> <tab> <Esc>:call UltiSnips_ExpandSnippetOrJump()<cr>
    "xnoremap <tab> :call UltiSnips_SaveLastVisualSelection()<cr>gv
  "  let g:UltiSnipsExpandTrigger="<c-n>"
  "  let g:UltiSnipsJumpForwardTrigger="<c-n>"
  "  let g:UltiSnipsJumpBackwardTrigger="<c-e>"
"}}}
" Clever-F {{{
  let g:clever_f_smart_case=1
  let g:clever_f_fix_key_direction=1
"}}}
"
" YouCompleteMe {{{
"
" Yankstack {{{
" ------------------------------------------------------------------
  nmap <leader>p <Plug>yankstack_substitute_older_paste
  nmap <leader>P <Plug>yankstack_substitute_newer_paste
"}}}
" Misc Binds {{{
" ------------------------------------------------------------------
  "remap semicolon and colon to make getting to ex mode faster
  nnoremap ; :
  nnoremap : ;
  vnoremap ; :
  vnoremap : ;

  "toggle paste with f6
  set pastetoggle=<F6>

  " create markdown table with f8
  nnoremap <F8> yyP:s/\v\S.{-}\ze(\s{2}\S\|$)/\=substitute(submatch(0),'.','-','g')/g<CR>

  "use 2 space tabs rather than 4
  set shiftwidth=2                " Use indents of 2 spaces
  set tabstop=2                   " An indentation every 2 columns
  set softtabstop=2               " Let backspace delete indent
  let g:airline_powerline_fonts = 1
  let g:gitgutter_realtime = 1
  set shell=/bin/bash
"}}}
" Go {{{
  filetype off
  filetype plugin indent off
  set runtimepath+=$GOROOT/misc/vim
  filetype plugin indent on
  syntax on
" }}}
