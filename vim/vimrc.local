" Colors {{{
  set background=light
  colorscheme solarized
" }}}
" Colemak               {{{
  source ~/.colemak/vimrc
  let g:LustyJugglerKeyboardLayout = "colemak"
"}}}"
  " Leader/nops/escape    {{{
  " ------------------------------------------------------------------
  " redefine leader from default backslash
  "let maplocalleader = "\<Space>"
"}}}

" Search, Copy, Replace {{{
" ------------------------------------------------------------------
  " kill search highlight with leader-slash
  noremap <leader>/ :noh<CR>
  " map leader z to toggle folding
  nnoremap <Leader>z za
  vnoremap <Leader>z za

"}}}
" Timestamp             {{{
" ------------------------------------------------------------------
  let g:timestamp_username="Jim Hester"
  let g:timestamp_modelines=15
  let g:timestamp_rep='%Y %b %d %r'
  let g:timestamp_regexp='\v\C%(<%(last )?%(changed?|modified):\s+)@<=%(\d{4}.*$?)|TIMESTAMP.*$' " }}}
" Perl                  {{{
" ------------------------------------------------------------------
  "to tidy the code"
  nnoremap <silent> <leader>t :%!perltidy -q<enter>
  vnoremap <silent> <leader>t :!perltidy -q<enter>

  let perl_include_pod   = 1    "include pod.vim syntax file with perl.vim"
  let perl_extended_vars = 1    "highlight complex expressions such as @{[$x, $y]}"
  let perl_sync_dist     = 250  "use more context for highlighting"
" }}}
" R                  {{{
" ------------------------------------------------------------------
  "do not allow insert mode commands
  let g:vimrplugin_insert_mode_cmds = 0

  " do not change the working directory
  let g:R_nvim_wd = -1
  let vimrplugin_notmuxconf = 1
  let vimrplugin_assign = 0
  "let g:RStudio_cmd = 'open /Applications/RStudio.app'
  let R_nvimpager = "no"
  let R_setwidth = 1
  "inoremap Q <space><-<space>
  "inoremap QQ Q
  "inoremap <C-Q> <space>-><space>
  "nnoremap Q i<space><-<space><Esc>

  " this sets an abbreviation for '_' to '<-'
  let g:R_assign = 0

  let g:vimrplugin_openhtml = 0
  let vimrpuglin_show_args = 1
  let r_indent_align_args = 0
  let g:rout_follow_colorscheme = 1
  let g:R_tmux_split = 1
  let g:terminal_scrollback_buffer_size = 32768

  "let g:R_vsplit = 1
  let g:R_rconsole_width = 80
  let g:R_esc_term = 0

  " Nvim-R keybindings
  let R_user_maps_only = 1
  let quit_command = 'savehistory();quit(save = "no")'
  nnoremap <silent> <LocalLeader>l :call SendCmdToR("l")<CR>
  nnoremap <silent> <LocalLeader>t :call SendCmdToR("devtools::test_file('" . expand("%") . "')")<CR>
  nnoremap <silent> <LocalLeader>d :call SendCmdToR("d")<CR>
  nnoremap <silent> <LocalLeader>a :call SendCmdToR("usethis::use_test('" . expand("%") . "')")<CR>
  nnoremap <silent> <LocalLeader>rf :call StartR("R")<CR>
  nnoremap <silent> <LocalLeader>rc :call StartR("Custom")<CR>
  nnoremap <silent> <LocalLeader>rq :call RQuit("save")<CR>

  if has('nvim')
    " movement commands for neovim terminal mode
    tnoremap <silent> <C-E> <C-\><C-N>:TmuxNavigateUp<CR>
    tnoremap <silent> <C-H> <C-\><C-N>:TmuxNavigateLeft<CR>
    tnoremap <silent> <C-N> <C-\><C-N>:TmuxNavigateDown<CR>
    tnoremap <silent> <C-E> <C-\><C-N>:TmuxNavigateUp<CR>
    " we can't use C-I as that is a horizontal tab so sends tab and breaks
    " everything
    tnoremap <silent> <C-'> <C-\><C-N>:TmuxNavigateRight<CR>
    tnoremap <silent> <C-\> <C-\><C-N>:TmuxNavigatePrevious<CR>

    " Map Space_ to <- in the terminal
    "tnoremap <Space>_ <Space><-

    let g:R_app = "rice"
    let g:R_cmd = "R"
    let g:R_hl_term = 0
  endif

  "bind double leader to send line and selection
  "vnoremap , :call SendSelectionToR("echo", "down")<CR>
  vmap , <Plug>REDSendSelection
  nmap , <Plug>RDSendLine

  "complete arguments
  imap <C-A> <Plug>RCompleteArgs

  "nnoremap <silent> <LocalLeader>h :call RAction("head")<CR>
  "nnoremap <silent> <LocalLeader>le :call RAction("levels")<CR>
  "nnoremap <silent> <LocalLeader>i :call RAction("dim")<CR>
  nnoremap <silent> <LocalLeader>kk :call RMakeHTML_2()<CR>
  function! RMakeHTML_2()
    update
    call RSetWD()
    let filename = expand("%:r:t")
    let rcmd = "require('knitrBootstrap');\
      \render(\"" . filename . ".Rmd\", knitrBootstrap::bootstrap_document")
    if g:vimrplugin_openhtml
      let rcmd = rcmd . '; browseURL("' . filename . '.html")'
    endif
    call g:SendCmdToR(rcmd)
  endfunction

  "let g:syntastic_enable_r_lintr_checker = 1
  "let g:syntastic_enable_rmd_lintr_checker = 1
  "let g:syntastic_r_checkers = 1
  "let g:syntastic_rmd_checkers = 1
  "let g:syntastic_r_lintr_linters = "with_defaults(camel_case_linter = NULL, line_length_linter(120))"

  " Turn off neomake for c and c++ as YCM does better here
  let g:neomake_c_enabled_makers = []
  let g:neomake_cpp_enabled_makers = []
  let g:neomake_r_lintr_linters = "with_defaults(camel_case_linter = NULL, line_length_linter(120))"
  " Run Neomake on save default
  autocmd! BufWritePost,BufEnter * Neomake
  let g:R_tmux_title = "automatic"

  nnoremap <silent>s :update<CR>
  nnoremap <silent> <leader>s :update<CR> :call g:SendCmdToR("devtools::load_all()")<CR>
  "add external scripts to RMD
  "nnoremap <silent> <leader>s :%!add_external_scripts.pl <enter>
  "vnoremap <silent> <leader>s :!add_external_scripts.pl <enter>
  "}}}"
" LustyJuggler {{{
" ------------------------------------------------------------------
  let g:LustyJugglerDefaultMappings = 0
  "noremap <Leader>b :LustyJuggler<CR>
"}}}
" Gundo {{{
" ------------------------------------------------------------------
  nnoremap <F5> :GundoToggle<CR>
"}}}
" Autoclose {{{
" ------------------------------------------------------------------
  " do not pair quotes when editing vim files
  let g:autoclose_vim_commentmode = 1
"}}}
"
" Autoclose {{{
" ------------------------------------------------------------------
   highlight clear SignColumn
"}}}
" CtrlP {{{
" ------------------------------------------------------------------
  let g:ctrlp_cmd = 'CtrlPMixed'
  let g:ctrlp_mruf_relative=1
"}}}
" Modeline {{{
" ------------------------------------------------------------------
  function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
          \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
  endfunction
  nnoremap <silent> <Leader>ml :call AppendModeline()<CR>
"}}}
" Ultisnips {{{
" ------------------------------------------------------------------

  "let g:UltiSnipsExpandTrigger='<Tab>'
  "let g:UltiSnipsListSnippets='<c-l>'
  ""let g:UltiSnipsJumpForwardTrigger='<c-n>'
  ""let g:UltiSnipsJumpBackwardTrigger='<c-e>'
  "" from https://github.com/Valloric/YouCompleteMe/issues/420#issuecomment-28782033
  "function! g:UltiSnips_Complete()
    "call UltiSnips#ExpandSnippet()
    "if g:ulti_expand_res == 0
      "if pumvisible()
        "return "\<C-n>"
      "else
        "call UltiSnips#JumpForwards()
        "if g:ulti_jump_forwards_res == 0
          "return "\<Tab>"
        "endif
      "endif
    "endif
    "return ""
  "endfunction

  "let g:ycm_key_list_select_completion = ['<Down>']
  "au VimEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
  "let g:UltiSnipsJumpForwardTrigger = '<Tab>'
  "let g:UltiSnipsJumpBackwardTrigger="<c-e>"

  "let g:UltiSnipsListSnippets="<c-e>"

    "let g:UltiSnipsExpandTrigger="<NL>"
    "inoremap <silent> <tab> <C-R>=g:UltiSnips_Complete()<cr>
    "snoremap <silent> <tab> <Esc>:call UltiSnips_ExpandSnippetOrJump()<cr>
    "xnoremap <tab> :call UltiSnips_SaveLastVisualSelection()<cr>gv
  "  let g:UltiSnipsExpandTrigger="<c-n>"
  "  let g:UltiSnipsJumpForwardTrigger="<c-n>"

  "set rtp^=$HOME
  "let g:UltiSnipsSnippetDirectories="UltiSnips"

"}}}
" Clever-F {{{
  let g:clever_f_smart_case=1
  let g:clever_f_fix_key_direction=1
"}}}
"
" YouCompleteMe {{{
"
" Yankstack {{{
" ------------------------------------------------------------------
  nmap <leader>p <Plug>yankstack_substitute_older_paste
  nmap <leader>P <Plug>yankstack_substitute_newer_paste
"}}}
" Misc Binds {{{
" ------------------------------------------------------------------
  "remap semicolon and colon to make getting to ex mode faster
  nnoremap ; :
  nnoremap : ;
  vnoremap ; :
  vnoremap : ;

  "unmap the 0 and $ binds
  nnoremap 0 0
  nnoremap $ $

  "toggle paste with f6
  set pastetoggle=<F6>

  " create markdown table with f8
  nnoremap <F8> yyP:s/\v\S.{-}\ze(\s{2}\S\|$)/\=substitute(submatch(0),'.','-','g')/g<CR>

  "use 2 space tabs rather than 4
  set shiftwidth=2                " Use indents of 2 spaces
  set tabstop=2                   " An indentation every 2 columns
  set softtabstop=2               " Let backspace delete indent
  let g:gitgutter_realtime = 1
  set shell=/bin/bash

  "replace text in visual mode with r
  vmap r "_dP
"}}}
let g:EclimCompletionMethod = 'omnifunc'
UnBundle 'vim-scripts/restore_view.vim'
UnBundle 'AutoClose'

"use tabs in java files because explorys is dumb
autocmd Filetype java setlocal ts=2 sw=2 noexpandtab

let g:pymode_doc_bind = '<leader>K'
let g:pymode_options = 0
let g:pymode_lint_ignore = "E501"
let g:pymode_lint_cwindow = 0

nnoremap <silent> <buffer> <F3> :JavaSearchContext<cr>

" If moving up or down with a count add to jumplist
" From https://superuser.com/questions/539708/vim-moving-around-using-relativenumber-and-adding-it-to-the-jump-list-for-use-w/539836#539836?newreg=bc727bd1089147209b0c06f594fe3f74
set relativenumber
nnoremap <silent> n :<C-U>execute 'normal!' (v:count > 1 ? "m'" . v:count : '') . 'j'<CR>
nnoremap <silent> e :<C-U>execute 'normal!' (v:count > 1 ? "m'" . v:count : '') . 'k'<CR>

"run command, put output into new buffer
command! -nargs=* -complete=shellcmd Run new | setlocal buftype=nofile bufhidden=hide noswapfile | r !<args>

"source ~/.ssh/github_token

let g:xml_syntax_folding = 1

" vim-tmux-navigator {{{
" ------------------------------------------------------------------
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-n> :TmuxNavigateDown<cr>
nnoremap <silent> <c-e> :TmuxNavigateUp<cr>
nnoremap <silent> <c-i> :TmuxNavigateRight<cr>
nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>
"  }}}

" vim-multiple-cursors {{{
" ------------------------------------------------------------------
let g:multi_cursor_start_key = '<F7>'
" }}}

" Ack {{{
" ------------------------------------------------------------------
let g:ackprg = 'rg --vimgrep --no-heading --glob !docs/ --glob !RcppExports.*'
" }}}
"
call dirsettings#Install()
let g:textobj#quote#educate = 0

" Rainbow configuration {{{
let g:rainbow_conf = {
    \   'ctermfgs': ['blue', 'yellow', 'cyan', 'magenta'],
    \}
" }}}
"
set lazyredraw

" vim-airline {{{
" ------------------------------------------------------------------
augroup FastEscape
  autocmd!
  au InsertEnter * set timeoutlen=0
  au InsertLeave * set timeoutlen=1000
augroup END
" }}}
"

" vim-clang-format {{{
" ------------------------------------------------------------------
" do not format if no .clang_format file is found
let g:clang_format#enable_fallback_style = 0
" }}}
"
let g:ycm_confirm_extra_conf = 0
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": split($TMUX, ",")[0], "target_pane": ":.+1"}
let g:slime_no_mappings = 1
autocmd FileType sml nmap , <Plug>SlimeParagraphSend
